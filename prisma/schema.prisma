// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  BUY
  REWARD
  MANUAL
}

enum UserRole {
  USER
  CLIENT
  ADMIN
}

enum UserPermission {
  NONE
  TOTAL
}

enum ActivityCategory {
  PRODUCT
  SERVICE
}

enum PinState {
  CREATED
  IN_USE
  USED
}

enum TransactionState {
  CONFIRMED
  CANCELLED
}

enum AlertStatus {
  NOT_SEEN
  SEEN
  DONE
}

enum AlertType {
  COMMENT_NEW
  COMMENT_PENDING
  VAR
}

model User {
  id         String         @id @default(uuid())
  name       String
  lastName   String
  email      String         @unique
  password   String
  active     Boolean        @default(true)
  role       UserRole       @default(USER)
  permission UserPermission @default(NONE)

  // Relations - Down
  Cards   Card[]
  Company Company?
  Alert   Alert[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes
  @@index([email])
}

model Company {
  id              String  @id @default(uuid())
  name            String
  backgroundColor String
  textColor       String  @default("#FFFFFF")
  active          Boolean @default(true)
  validated       Boolean @default(false)
  address         String
  description     String?
  slug            String  @unique
  lat             Float?
  lng             Float?
  openHours       Json
  averageRating   Float   @default(0)
  totalRating     Float   @default(0)

  // Social media addresses
  instagram String?
  facebook  String?
  twitter   String?
  whatsapp  String?
  phone     String?
  site      String?

  // Relations - Down
  Products      Product[]
  Cards         Card[]
  CompanyLogo   CompanyLogo?
  CompanyReview CompanyReview[]
  Alert         Alert[]

  // Relations - Up
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // Relations - Many-to-One
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId String
}

model ActivityType {
  id       String           @id @default(uuid())
  name     String
  category ActivityCategory

  // Relations - One-to-Many with SubCategory
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?

  // Relations - One-to-Many with Company
  companies Company[] // One ActivityType can relate to many Companies
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  // Relations - Many-to-One with ActivityType
  activityTypes ActivityType[]
}

model CompanyLogo {
  id  String @id @default(uuid())
  url String

  // Relations - Up
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String   @unique
}

model Card {
  id        String  @id @default(uuid())
  points    Int     @default(0)
  favourite Boolean @default(false)
  active    Boolean @default(true)

  // Relations - Down
  History PointTransaction[]
  Pin     Pin[]

  // Relations - Up
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  // Indexes
  @@unique([userId, companyId])
}

model PointTransaction {
  id          String           @id @default(uuid())
  points      Int
  date        DateTime         @default(now())
  state       TransactionState @default(CONFIRMED)
  description String?

  // Relations - Down
  type                TransactionType
  transactionProducts TransactionProduct[]
  Alert               Alert[]

  // Relations - Up
  card   Card   @relation(fields: [cardId], references: [id])
  cardId String

  // One-to-One relation with CompanyReview (ensuring only one review per transaction)
  companyReview   CompanyReview? @relation(name: "CompanyReviewToPointTransaction")
  companyReviewId String?
}

model TransactionProduct {
  id            String @id @default(cuid())
  quantity      Int
  productName   String
  productPoints Int
  productId     String

  // Relations - Up
  pointTransaction   PointTransaction @relation(fields: [pointTransactionId], references: [id])
  pointTransactionId String
}

model PointTransactionTemplate {
  id          String  @id @default(uuid())
  points      Int
  description String?

  // Relations - Down
  type TransactionType

  // Relations - Up
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String?
  active      Boolean @default(true)

  // Relations - Many-to-Many with PointTransaction
  // transactions PointTransaction[] @relation("TransactionProducts")

  // Relations - Down
  templates    PointTransactionTemplate[]
  ProductImage ProductImage?

  // Relations - Up
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  // Relations - Up
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique
}

model CompanyReview {
  id        String   @id @default(uuid()) // Unique identifier for the review
  rating    Int // Rating value, e.g., 1 to 5 stars
  comment   String? // Optional comment text
  createdAt DateTime @default(now()) // Timestamp when the review was created
  updatedAt DateTime @updatedAt // Timestamp for the last update

  // Relations - Up
  pointTransaction   PointTransaction @relation(name: "CompanyReviewToPointTransaction", fields: [pointTransactionId], references: [id], onDelete: Cascade)
  pointTransactionId String           @unique
  Company            Company          @relation(fields: [companyId], references: [id])
  companyId          String

  // Indexes
  @@index([pointTransactionId])
}

model Pin {
  id        String   @id @default(uuid())
  pin       String   @unique
  expiresAt DateTime
  state     PinState @default(CREATED) // Default state is CREATED

  // Relations Up
  card   Card   @relation(fields: [cardId], references: [id])
  cardId String @unique

  // Indexes
  @@index([cardId])
}

model Alert {
  id        String      @id @default(uuid())
  type      AlertType   @default(VAR) // Enum for alert status
  status    AlertStatus @default(NOT_SEEN) // Enum for alert status
  createdAt DateTime    @default(now()) // Timestamp when the alert was created
  updatedAt DateTime    @updatedAt // Timestamp for the last update

  // Relations - Up
  user               User              @relation(fields: [userId], references: [id])
  userId             String // Foreign key to User
  company            Company           @relation(fields: [companyId], references: [id])
  companyId          String // Foreign key to Company
  pointTransaction   PointTransaction? @relation(fields: [pointTransactionId], references: [id])
  pointTransactionId String? // Optional Foreign key to PointTransaction
}
