// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  BUY
  REWARD
  MANUAL
}

enum UserRole {
  USER
  CLIENT
  ADMIN
}

enum ActivityCategory {
  PRODUCT
  SERVICE
}

model User {
  id       String   @id @default(uuid())
  name     String
  lastName String
  email    String   @unique
  password String
  image    String?
  role     UserRole @default(USER)

  // Relations - Down
  Cards   Card[]
  Company Company?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes
  @@index([email])
}

model Company {
  id              String  @id @default(uuid())
  name            String
  backgroundColor String?
  acceptReferral  Boolean @default(false)
  address         String?
  openDays        String?
  openHours       String?

  // Relations - Down
  Products    Product[]
  Templates   PointTransactionTemplate[]
  Cards       Card[]
  CompanyLogo CompanyLogo?

  // Relations - Up
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // Relations - Many-to-One
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId String
}

model ActivityType {
  id       String           @id @default(uuid())
  name     String
  category ActivityCategory

  // Relations - One-to-Many with SubCategory
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?

  // Relations - One-to-Many with Company
  companies Company[] // One ActivityType can relate to many Companies
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  // Relations - Many-to-One with ActivityType
  activityTypes ActivityType[]
}

model CompanyLogo {
  id  String @id @default(uuid())
  url String

  // Relations - Up
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String   @unique
}

model Card {
  id     String @id @default(uuid())
  points Int    @default(0)

  // Relations - Down
  History PointTransaction[]

  // Relations - Up
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  // Indexes
  @@unique([userId, companyId])
}

model PointTransaction {
  id     String   @id @default(uuid())
  points Int
  date   DateTime @default(now())
  reason String

  // Relations - Down
  type TransactionType

  // Relations - Up
  card   Card   @relation(fields: [cardId], references: [id])
  cardId String
}

model PointTransactionTemplate {
  id          String @id @default(uuid())
  points      Int
  description String

  // Relations - Down
  type TransactionType

  // Relations - Up
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Product {
  id          String @id @default(uuid())
  name        String
  price       Float
  description String
  image       String

  // Relations - Down
  templates PointTransactionTemplate[]

  // Relations - Up
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}
